const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');

const BOT_TOKEN = '8143486909:AAGU7BLjinOl-6auFF6w3ZRKCRclL6qgzTA';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

app.use(express.json());
app.use(express.static('.'));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
const invitedUsers = new Map(); // roomId -> Set of {userId, userName, chatId}

// Serve manifest.json –∏ sw.js
app.get('/manifest.json', (req, res) => {
    res.sendFile(__dirname + '/manifest.json');
});

app.get('/sw.js', (req, res) => {
    res.sendFile(__dirname + '/sw.js');
});

// Telegram Mini App
app.get('/telegram', (req, res) => {
    res.sendFile(__dirname + '/telegram.html');
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
app.get('/api/invited/:roomId', (req, res) => {
    const roomId = req.params.roomId;
    const invited = invitedUsers.get(roomId) || [];
    res.json({ invited: Array.from(invited) });
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
app.post('/api/invite', async (req, res) => {
    const { userId, userName, roomId, inviteLink } = req.body;
    
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        const message = `üéôÔ∏è ${userName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é Pozvonok!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`;
        
        const keyboard = {
            inline_keyboard: [[
                { text: 'üé• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', url: inviteLink }
            ]]
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: userId,
                text: message,
                reply_markup: keyboard
            })
        });
        
        const result = await response.json();
        
        if (result.ok) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!invitedUsers.has(roomId)) {
                invitedUsers.set(roomId, new Set());
            }
            invitedUsers.get(roomId).add({ userId, userName, timestamp: Date.now() });
            
            res.json({ success: true });
        } else {
            res.json({ success: false, error: result.description });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        res.json({ success: false, error: error.message });
    }
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
app.post(`/webhook/${BOT_TOKEN}`, async (req, res) => {
    const update = req.body;
    
    if (update.message) {
        const chatId = update.message.chat.id;
        const text = update.message.text;
        
        if (text === '/start') {
            console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç:', chatId);
            
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const welcomeMessage = `üéôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pozvonok!

–ü—Ä–µ–º–∏—É–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.

üìû –°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–µ–ª–æ–¥–∏—é –∑–≤–æ–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞.

‚ö° –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–ª–∏—á–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é!`;
            
            const welcomeRes = await fetch(`${TELEGRAM_API}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: welcomeMessage
                })
            });
            
            console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', await welcomeRes.json());
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–ª–æ–¥–∏—é —Å—Ä–∞–∑—É
            setTimeout(async () => {
                const instructionText = `üîî –ö–ê–ö –£–°–¢–ê–ù–û–í–ò–¢–¨ –ú–ï–õ–û–î–ò–Æ –ù–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢ –≠–¢–û–ì–û –ë–û–¢–ê:

üì± –ù–ê ANDROID:
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤—ã—à–µ –∏ –ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ —Ç—Ä–∏ —Ç–æ—á–∫–∏ (‚ãÆ) –≤ —É–≥–ª—É
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∏–Ω–≥—Ç–æ–Ω"
4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"

üì± –ù–ê IPHONE:
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" ‚Üí "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –§–∞–π–ª—ã"
3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫–∏
4Ô∏è‚É£ –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

üí° –ó–ê–ß–ï–ú –≠–¢–û –ù–£–ñ–ù–û:
–ö–æ–≥–¥–∞ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å—è—Ç –≤ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –≤—ã —É—Å–ª—ã—à–∏—Ç–µ —ç—Ç—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ–ª–æ–¥–∏—é –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ "–¥–∑–∏–Ω—å" –∏ —Å—Ä–∞–∑—É –ø–æ–π–º–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ó–í–û–ù–û–ö, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!

‚úÖ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ Pozvonok ‚Üì`;
                
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª...');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ URL (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
                const audioRes = await fetch(`${TELEGRAM_API}/sendAudio`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: chatId,
                        audio: 'https://pozvonok.onrender.com/ringtone.mp3',
                        caption: instructionText,
                        title: '–ú–µ–ª–æ–¥–∏—è –∑–≤–æ–Ω–∫–∞ Pozvonok',
                        performer: 'Pozvonok'
                    })
                });
                
                const audioResult = await audioRes.json();
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ:', audioResult);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
                const keyboard = {
                    inline_keyboard: [
                        [{ text: '‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å Pozvonok', web_app: { url: 'https://pozvonok.onrender.com/telegram' } }]
                    ]
                };
                
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è...');
                
                const btnRes = await fetch(`${TELEGRAM_API}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: 'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:',
                        reply_markup: keyboard
                    })
                });
                
                console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', await btnRes.json());
            }, 1000);
        }
    }
    
    
    res.sendStatus(200);
});

// WebSocket –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π (–∏–∑ server.js)
const clients = new Map();
const rooms = new Map();
const userNames = [
    '–ê–ª—å—Ñ–∞', '–ë—Ä–∞–≤–æ', '–ß–∞—Ä–ª–∏', '–î–µ–ª—å—Ç–∞', '–≠—Ö–æ', '–§–æ–∫—Å—Ç—Ä–æ—Ç', '–ì–æ–ª—å—Ñ', '–•–æ—Ç–µ–ª',
    '–ò–Ω–¥–∏—è', '–î–∂—É–ª—å–µ—Ç—Ç–∞', '–ö–∏–ª–æ', '–õ–∏–º–∞', '–ú–∞–π–∫', '–ù–æ–≤–µ–º–±—Ä', '–û—Å–∫–∞—Ä', '–ü–∞–ø–∞',
    '–ö–≤–µ–±–µ–∫', '–†–æ–º–µ–æ', '–°—å–µ—Ä—Ä–∞', '–¢–∞–Ω–≥–æ', '–Æ–Ω–∏—Ñ–æ—Ä–º', '–í–∏–∫—Ç–æ—Ä', '–í–∏—Å–∫–∏', '–†–µ–Ω—Ç–≥–µ–Ω',
    '–Ø–Ω–∫–∏', '–ó—É–ª—É', '–§–µ–Ω–∏–∫—Å', '–¢–∏—Ç–∞–Ω', '–ù–µ–ø—Ç—É–Ω', '–û—Ä–∏–æ–Ω', '–ê—Ç–ª–∞—Å', '–ó–µ–≤—Å'
];

function generateUserName() {
    const name = userNames[Math.floor(Math.random() * userNames.length)];
    const num = Math.floor(Math.random() * 99) + 1;
    return `${name}-${num}`;
}

function sanitizeName(name) {
    return name.replace(/[<>]/g, '').substring(0, 20);
}

function generateRoomId() {
    return Math.random().toString(36).substring(2, 10);
}

wss.on('connection', (ws) => {
    const clientId = generateId();
    const userName = generateUserName();
    
    clients.set(clientId, { ws, userName, customName: null, roomId: null });
    
    console.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${userName} (${clientId}). –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
    
    ws.send(JSON.stringify({
        type: 'welcome',
        clientId: clientId,
        userName: userName,
        totalUsers: clients.size
    }));
    
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            switch(data.type) {
                case 'offer':
                case 'answer':
                case 'ice-candidate':
                    if (data.to) {
                        const sender = clients.get(clientId);
                        const recipient = clients.get(data.to);
                        
                        if (sender && recipient && 
                            sender.roomId === recipient.roomId &&
                            recipient.ws.readyState === WebSocket.OPEN) {
                            recipient.ws.send(JSON.stringify({ ...data, from: clientId }));
                        }
                    }
                    break;
                case 'audio-level':
                    const audioClient = clients.get(clientId);
                    if (audioClient && audioClient.roomId) {
                        broadcastToRoom(audioClient.roomId, {
                            type: 'audio-level',
                            userId: clientId,
                            level: data.level
                        }, clientId);
                    }
                    break;
                case 'chat-message':
                    const userData = clients.get(clientId);
                    const displayName = userData?.customName || userData?.userName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    if (userData && userData.roomId) {
                        broadcastToRoom(userData.roomId, {
                            type: 'chat-message',
                            userId: clientId,
                            userName: displayName,
                            message: data.message,
                            timestamp: Date.now()
                        });
                        console.log(`[–ö–æ–º–Ω–∞—Ç–∞ ${userData.roomId}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${displayName}: ${data.message}`);
                    }
                    break;
                case 'set-custom-name':
                    const client = clients.get(clientId);
                    if (client && data.customName) {
                        const customName = sanitizeName(data.customName);
                        client.customName = customName;
                        console.log(`${client.userName} —Å–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ ${customName}`);
                        
                        broadcastToRoom(client.roomId, {
                            type: 'name-updated',
                            userId: clientId,
                            customName: customName
                        });
                    }
                    break;
                case 'create-room':
                    const newRoomId = generateRoomId();
                    const creator = clients.get(clientId);
                    if (creator) {
                        creator.roomId = newRoomId;
                        
                        if (!rooms.has(newRoomId)) {
                            rooms.set(newRoomId, new Set());
                        }
                        rooms.get(newRoomId).add(clientId);
                        
                        console.log(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${newRoomId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${creator.customName || creator.userName}`);
                        
                        ws.send(JSON.stringify({
                            type: 'room-created',
                            roomId: newRoomId
                        }));
                        
                        sendRoomUserList(clientId, newRoomId);
                        
                        broadcastToRoom(newRoomId, {
                            type: 'user-joined',
                            userId: clientId,
                            userName: creator.customName || creator.userName,
                            count: rooms.get(newRoomId).size
                        }, clientId);
                    }
                    break;
                case 'join-room':
                    if (data.roomId) {
                        const joiner = clients.get(clientId);
                        if (joiner) {
                            joiner.roomId = data.roomId;
                            
                            if (!rooms.has(data.roomId)) {
                                rooms.set(data.roomId, new Set());
                            }
                            rooms.get(data.roomId).add(clientId);
                            
                            console.log(`${joiner.customName || joiner.userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId}`);
                            
                            sendRoomUserList(clientId, data.roomId);
                            
                            broadcastToRoom(data.roomId, {
                                type: 'user-joined',
                                userId: clientId,
                                userName: joiner.customName || joiner.userName,
                                count: rooms.get(data.roomId).size
                            }, clientId);
                        }
                    }
                    break;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        }
    });
    
    ws.on('close', () => {
        const userData = clients.get(clientId);
        const userRoomId = userData?.roomId;
        
        clients.delete(clientId);
        
        if (userRoomId && rooms.has(userRoomId)) {
            rooms.get(userRoomId).delete(clientId);
            
            if (rooms.get(userRoomId).size === 0) {
                rooms.delete(userRoomId);
                console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${userRoomId} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`);
            } else {
                broadcastToRoom(userRoomId, {
                    type: 'user-left',
                    userId: clientId,
                    userName: userData?.customName || userData?.userName,
                    count: rooms.get(userRoomId).size
                });
            }
        }
        
        console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${userData?.customName || userData?.userName} (${clientId}). –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
    });
});

function broadcast(data, excludeId = null) {
    const message = JSON.stringify(data);
    clients.forEach((clientData, id) => {
        if (id !== excludeId && clientData.ws.readyState === WebSocket.OPEN) {
            clientData.ws.send(message);
        }
    });
}

function broadcastToOthers(data, fromId) {
    const message = JSON.stringify({ ...data, from: fromId });
    clients.forEach((clientData, id) => {
        if (id !== fromId && clientData.ws.readyState === WebSocket.OPEN) {
            clientData.ws.send(message);
        }
    });
}

function generateId() {
    return Math.random().toString(36).substr(2, 9);
}

function broadcastToRoom(roomId, data, excludeId = null) {
    if (!rooms.has(roomId)) return;
    
    const message = JSON.stringify(data);
    rooms.get(roomId).forEach(clientId => {
        if (clientId !== excludeId) {
            const client = clients.get(clientId);
            if (client && client.ws.readyState === WebSocket.OPEN) {
                client.ws.send(message);
            }
        }
    });
}

function sendRoomUserList(clientId, roomId) {
    if (!rooms.has(roomId)) return;
    
    const client = clients.get(clientId);
    if (!client) return;
    
    const userList = [];
    rooms.get(roomId).forEach(id => {
        if (id !== clientId) {
            const user = clients.get(id);
            if (user) {
                userList.push({
                    id: id,
                    userName: user.customName || user.userName
                });
            }
        }
    });
    
    client.ws.send(JSON.stringify({
        type: 'user-list',
        users: userList
    }));
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
async function setWebhook() {
    const webhookUrl = 'https://pozvonok.onrender.com/webhook/' + BOT_TOKEN;
    
    try {
        const response = await fetch(`${TELEGRAM_API}/setWebhook`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ url: webhookUrl })
        });
        
        const result = await response.json();
        console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    }
}

const PORT = process.env.PORT || 3000;
const HOST = '0.0.0.0';

server.listen(PORT, HOST, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if (process.env.NODE_ENV === 'production') {
        setTimeout(() => setWebhook(), 2000);
    }
});

